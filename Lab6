#include <iostream>
#include <fstream>
#include <string>
#include <utility>
#include <vector>
#include <limits>
using namespace std;


struct Employee {
    Employee(string a, string b, string c, long long d) : fio(std::move(a)), employ_date(std::move(b)),
                                                             post (std::move(c)), base_wage(d) {}
    Employee() {
        fio = ' ';
        employ_date = ' ';
        post = ' ';
        base_wage = 0;
    }
    string fio;
    string employ_date;
    string post;
    long long base_wage;
};


string mode;
string appearance;
string path;
int n = 0;
vector<Employee> employees;
int error = 0;


int write_txt() {
    ofstream out(path, ios::app);
    if (out.is_open()) {
        cout << "Enter number of employees: ";
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
        for (int i = 0; i < n; ++i) {
            string fio;
            string employ_date;
            string post;
            long long base_wage;
            cout << "Enter FIO for employee #" << i + 1 << ": ";
            getline(cin, fio);
            cout << "Enter employ date for employee #" << i + 1 << ": ";
            getline(cin, employ_date);
            cout << "Enter post for employee #" << i + 1 << ": ";
            getline(cin, post);
            cout << "Enter base wage for employee #" << i + 1 << ": ";
            cin >> base_wage;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            employees.emplace_back(fio, employ_date, post, base_wage);
            out << employees[i].fio << '\n' << employees[i].employ_date << '\n' << employees[i].post << '\n'
                << employees[i].base_wage << '\n';
        }

        return 0;
    }
    else
        return 1;
}


int read_txt() {
    ifstream in(path);
    if (in.is_open()) {
        string fio;
        string employ_date;
        string post;
        long long base_wage;
        string line;
        int k = 0;
        while (getline(in, line)) {
            switch (k % 4) {
                case 0: {
                    fio = line;
                    break;
                }
                case 1: {
                    employ_date = line;
                    break;
                }
                case 2: {
                    post = line;
                    break;
                }
                case 3: {
                    base_wage = stoll(line);
                    employees.emplace_back(fio, employ_date, post, base_wage);
                    ++n;
                    break;
                }
            }
            ++k;
        }
        for (int i = 0; i < n; ++i) {
            cout << "\nEmployee #" << i + 1 << ":\n"
                 << "FIO: " << employees[i].fio << '\n'
                 << "Employ date: " << employees[i].employ_date << '\n'
                 << "Post: " << employees[i].post << '\n'
                 << "Base wage: " << employees[i].base_wage << '\n';
        }
        if (in.bad()) {
            in.close();
            return 4;
        }
        else {
            if (!in.eof()) {
                in.close();
                return 3;
            } else {
                in.close();
                return 2;
            }
        }
    }
    else
        return 1;
}


int write_bin() {
    ofstream out(path, ios::app | ios::binary);
    if (out.is_open()) {
        cout << "Enter number of employees: ";
        cin >> n;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');

        for (int i = 0; i < n; ++i) {
            string fio;
            string employ_date;
            string post;
            long long base_wage;
            cout << "Enter FIO for employee #" << i + 1 << ": ";
            getline(cin, fio);
            cout << "Enter employ date for employee #" << i + 1 << ": ";
            getline(cin, employ_date);
            cout << "Enter post for employee #" << i + 1 << ": ";
            getline(cin, post);
            cout << "Enter base wage for employee #" << i + 1 << ": ";
            cin >> base_wage;
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            employees.emplace_back(fio, employ_date, post, base_wage);
        }

        out.write((char *) &n, sizeof(n));
        for (auto iterator: employees) {
            out << iterator.fio << ends << iterator.employ_date << ends << iterator.post << ends;
            out.write((char *) &iterator.base_wage, sizeof(iterator.base_wage));
        }

        return 0;
    }
    else
        return 1;
}


int read_bin() {
    ifstream in(path, ios::binary);
    if (in.is_open()) {
        string fio;
        string employ_date;
        string post;
        long long base_wage;

        in.read((char *) &n, sizeof(n));
        employees.resize(n);

        for (auto &iterator: employees) {

            getline(in, iterator.fio, '\0');
            getline(in, iterator.employ_date, '\0');
            getline(in, iterator.post, '\0');
            in.read((char *) &iterator.base_wage, sizeof(iterator.base_wage));
        }

        for (int i = 0; i < n; ++i) {
            cout << "\nEmployee #" << i + 1 << ":\n"
                 << "FIO: " << employees[i].fio << '\n'
                 << "Employ date: " << employees[i].employ_date << '\n'
                 << "Post: " << employees[i].post << '\n'
                 << "Base wage: " << employees[i].base_wage << '\n';
        }
        cout << (char)in.get();
        if (in.bad()) {
            in.close();
            return 4;
        }
        else {
            if (!in.eof()) {
                in.close();
                return 3;
            } else {
                in.close();
                return 2;
            }
        }
    }
    else
        return 1;
}


int clear() {
    ofstream out(path);
    if (out.is_open()) {
        out.close();
        return 0;
    }
    else
        return 1;
}


int main(int argc, char* argv[]) {

    mode = argv[1];
    appearance = argv[2];
    path = argv[3];

    if ((mode.find("write") != string::npos) && (appearance.find("text") != string::npos))
        error = write_txt();
    if ((mode.find("read") != string::npos) && (appearance.find("text") != string::npos))
        error = read_txt();
    if ((mode.find("write") != string::npos) && (appearance.find("binary") != string::npos))
        error = write_bin();
    if ((mode.find("read") != string::npos) && (appearance.find("binary") != string::npos))
        error = read_bin();
    if (mode.find("clear") != string::npos)
        error = clear();

    switch (error) {
        case 0:
            return 0;
        case 1: {
            cout << "\n*Unable to open file*" << '\n';
            return 1;
        }
        case 2: {
            cout << "\n*End of file*" << '\n';
            return 2;
        }
        case 3: {
            cout << "\n*Format error*" << '\n';
            return 3;
        }
        case 4: {
            cout << "\n*I/O error*" << '\n';
            return 4;
        }
    }
    return 0;
}
